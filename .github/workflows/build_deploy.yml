name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '14.x'
  OBSCENE_COMMITS_CONTAINER_NAME: 'obscene_commits_archives'
  INFRASTRUCTURE_FOLDER: './infrastructure'
  DNS_INFRA_FOLDER: 'dns'
  WEBSITE_INFRA_FOLDER: 'website'
  # LG_API_BASE_PATH: 'https://languagegarbler.jkomskis.com'

jobs:
  create_dns_resources:
    # Based on https://github.com/marketplace/actions/hashicorp-setup-terraform
    # Resources:
      # https://www.blendmastersoftware.com/blog/deploying-to-azure-using-terraform-and-github-actions
    runs-on: ubuntu-latest
    environment: deploy

    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      CLOUDFLARE_EMAIL: ${{secrets.CLOUDFLARE_EMAIL}}
      CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}

    steps:
    - name: Main branch deployment name
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: echo "DEPLOYMENT_NAME=prod" >> $GITHUB_ENV

    - name: Non-main branch deployment name
      if: ${{ github.event_name == 'pull_request' }}
      run: echo "DEPLOYMENT_NAME=${{ github.head_ref }}" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.DNS_INFRA_FOLDER }}

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.DNS_INFRA_FOLDER }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.DNS_INFRA_FOLDER }}

    - name: Terraform Apply
      id: apply
      shell: bash {0}
      run: |
        terraform workspace new ${{ env.DEPLOYMENT_NAME }}
        terraform workspace select ${{ env.DEPLOYMENT_NAME }}
        terraform apply -auto-approve -no-color
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.DNS_INFRA_FOLDER }}

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      shell: bash {0}
      run: |
        terraform workspace new prod
        terraform workspace select prod
        terraform plan -no-color
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.DNS_INFRA_FOLDER }}

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('DNS Terraform Summary')
          })

          // 2. Prepare format of the comment
          const output = `#### DNS Terraform Summary
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.INFRASTRUCTURE_FOLDER }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

  create_website_resources:
    # Based on https://github.com/marketplace/actions/hashicorp-setup-terraform
    # Resources:
      # https://www.blendmastersoftware.com/blog/deploying-to-azure-using-terraform-and-github-actions
    runs-on: ubuntu-latest
    environment: deploy
    needs: [create_dns_resources]

    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      CLOUDFLARE_EMAIL: ${{secrets.CLOUDFLARE_EMAIL}}
      CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}

    steps:
    - name: Main branch deployment name
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: echo "DEPLOYMENT_NAME=prod" >> $GITHUB_ENV

    - name: Non-main branch deployment name
      if: ${{ github.event_name == 'pull_request' }}
      run: echo "DEPLOYMENT_NAME=${{ github.head_ref }}" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Terraform Apply
      id: apply
      shell: bash {0}
      run: |
        terraform workspace new ${{ env.DEPLOYMENT_NAME }}
        terraform workspace select ${{ env.DEPLOYMENT_NAME }}
        terraform apply -auto-approve -no-color
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      shell: bash {0}
      run: |
        terraform workspace new prod
        terraform workspace select prod
        terraform plan -no-color
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Website Terraform Summary')
          })

          // 2. Prepare format of the comment
          const output = `#### Website Terraform Summary
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.INFRASTRUCTURE_FOLDER }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

  build_frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # - name: Get current time
    #   uses: 1466587594/get-current-time@v2
    #   id: current-time

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules-frontend
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    # - name: Cache Archives
    #   uses: actions/cache@v2
    #   env:
    #     cache-name: cache-archives-v1
    #     YEAR: "${{ steps.current-time.outputs.year }}"
    #     MONTH: "${{ steps.current-time.outputs.month }}"
    #     DAY: "${{ steps.current-time.outputs.day }}"
    #     HOUR: "${{ steps.current-time.outputs.hour }}"
    #   with:
    #     path: archives
    #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.YEAR }}-${{ env.MONTH }}-${{ env.DAY }}-${{ env.HOUR }}
    #     restore-keys: |
    #       ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.YEAR }}-${{ env.MONTH }}-${{ env.DAY }}-
    #       ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.YEAR }}-${{ env.MONTH }}-
    #       ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.YEAR }}-
    #       ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - run: npm ci

    - run: npm run build:prod

    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: _site/

  deploy_frontend:
    # https://blog.nillsf.com/index.php/2020/08/25/how-to-use-terraform-output-in-a-github-action/
    needs: [create_website_resources, build_frontend]
    runs-on: ubuntu-latest
    environment: deploy

    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      CLOUDFLARE_EMAIL: ${{secrets.CLOUDFLARE_EMAIL}}
      CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}

    steps:
    - name: Main branch deployment name
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: echo "DEPLOYMENT_NAME=prod" >> $GITHUB_ENV

    - name: Non-main branch deployment name
      if: ${{ github.event_name == 'pull_request' }}
      run: echo "DEPLOYMENT_NAME=${{ github.head_ref }}" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Terraform Workspace
      shell: bash {0}
      run: |
        terraform workspace new ${{ env.DEPLOYMENT_NAME }}
        terraform workspace select ${{ env.DEPLOYMENT_NAME }}
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Get resource group
      run: |
        rg=$(terraform output resource_group | tr -d '"')
        echo "RESOURCE_GROUP=$rg" >> $GITHUB_ENV
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Get storage account
      run: |
        sa=$(terraform output storage_account_name | tr -d '"')
        echo "STORAGE_ACCOUNT_NAME=$sa" >> $GITHUB_ENV
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Print variables
      run: |
        echo ${{ env.RESOURCE_GROUP }}
        echo ${{ env.STORAGE_ACCOUNT_NAME }}

    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: _site/

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Upload to blob storage
      uses: azure/powershell@v1
      with:
        azPSVersion: latest
        inlineScript: |
          & "${{ github.workspace }}/scripts/upload_blobs.ps1" ${{ env.RESOURCE_GROUP }} ${{ env.STORAGE_ACCOUNT_NAME }}

  build_deploy_backend:
    # https://blog.nillsf.com/index.php/2020/08/25/how-to-use-terraform-output-in-a-github-action/
    needs: [create_website_resources]
    runs-on: ubuntu-latest
    environment: deploy

    env:
      AZURE_FUNCTIONAPP_PACKAGE_PATH: 'backend/' # set this to the path to your web app project, defaults to the repository root

    steps:
    - name: Main branch deployment name
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: echo "DEPLOYMENT_NAME=prod" >> $GITHUB_ENV

    - name: Non-main branch deployment name
      if: ${{ github.event_name == 'pull_request' }}
      run: echo "DEPLOYMENT_NAME=${{ github.head_ref }}" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules-backend
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(format('{0}/package-lock.json', env.AZURE_FUNCTIONAPP_PACKAGE_PATH)) }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - run: npm ci
      working-directory: ./${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    - name: 'Build functions'
      run: npm run build --if-present
      working-directory: ./${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Terraform Workspace
      shell: bash {0}
      run: |
        terraform workspace new ${{ env.DEPLOYMENT_NAME }}
        terraform workspace select ${{ env.DEPLOYMENT_NAME }}
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Get resource group
      run: |
        rg=$(terraform output resource_group | tr -d '"')
        echo "RESOURCE_GROUP=$rg" >> $GITHUB_ENV
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - name: Get function app name
      run: |
        fa=$(terraform output function_app_name | tr -d '"')
        echo "FUNCTION_APP_NAME=$fa" >> $GITHUB_ENV
      working-directory: ${{ env.INFRASTRUCTURE_FOLDER }}/${{ env.WEBSITE_INFRA_FOLDER }}

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    # https://www.shanebart.com/deploy-az-func-with-github-actions/
    - name: 'Get Function App Publish Profile'
      id: pubprofile
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $profile = Get-AzWebAppPublishingProfile -ResourceGroupName $env:RESOURCE_GROUP -Name $env:FUNCTION_APP_NAME
          $profile = $profile.Replace("`r", "").Replace("`n", "")
          Write-Output "::set-output name=pubprofile::$profile"
          Remove-Variable profile
        azPSVersion: "latest"

    - name: 'Deploy Azure Functions'
      uses: Azure/functions-action@v1
      with:
        app-name: "website-${{ env.DEPLOYMENT_NAME }}"
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ steps.pubprofile.outputs.pubprofile }}

    - uses: actions/upload-artifact@v2
      with:
        name: dist-backend
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/dist

