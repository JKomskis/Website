name: Build and Deploy Website

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: '14.x'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master

    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - run: npm ci

    - run: npm run build:prod

    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: _site/

  deploy:
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: _site/

    - uses: azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
    
    - name: Upload to blob storage
      uses: azure/powershell@v1
      with:
        azPSVersion: latest
        inlineScript: |
          $staticAssetCacheControl = "public, max-age=31536000, immutable"
          $revalidateAssetCacheControl = "no-cache"
          $properties = @{
            ".css" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "text/css"
            }
            ".js" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "application/javascript"
            }
            ".woff" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "font/woff"
            }
            ".woff2" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "font/woff2"
            }
            ".jpg" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "image/jpeg"
            }
            ".png" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "image/png"
            }
            ".svg" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "image/svg+xml"
            }
            ".html" = @{
              CacheControl = $revalidateAssetCacheControl
              ContentType = "text/html"
            }
          }
          cd _site
          Set-AzCurrentStorageAccount -ResourceGroupName ${{ secrets.RESOURCE_GROUP_NAME }} -Name ${{ secrets.STORAGE_ACCOUNT_NAME }}
          Get-ChildItem -File -Recurse |
            Foreach-Object {
              Write-Output $_.fullName
              Write-Output $_.extension
              $fileProperties = $properties[$_.extension]
              $relativePath = $_ | Resolve-Path -Relative
              if($fileProperties) {
                Set-AzStorageBlobContent -File $_.fullName -Blob $relativePath -Container '$web' -properties $fileProperties -Force
              } else {
                Set-AzStorageBlobContent -File $_.fullName -Blob $relativePath -Container '$web' -Force
              }
            }

