name: Build and Deploy Frontend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron:  '15 0 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '14.x'
  OBSCENE_COMMITS_ACCOUNT_NAME: obscenecommits
  ARCHIVE_CONTAINER_NAME: archives

jobs:
  build:
    runs-on: ubuntu-latest
    environment: build_frontend

    steps:
    - name: Set main branch deploy path prefix
      if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'schedule'}}
      run: echo "FRONTEND_DEPLOY_PATH=" >> $GITHUB_ENV
    
    - name: Set non-main branch deploy path prefix
      if: ${{ github.event_name == 'pull_request' && github.head_ref != 'refs/heads/main' }}
      run: echo "FRONTEND_DEPLOY_PATH=staging/${{ github.head_ref }}" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - run: npm ci

    - run: npm run build:prod
      env:
        OBSCENE_COMMITS_ACCOUNT_NAME: ${{ env.OBSCENE_COMMITS_ARCHIVE_ACCOUNT_NAME }}
        ARCHIVE_CONTAINER_NAME: ${{ env.OBSCENE_COMMITS_ARCHIVE_CONTAINER_NAME }}
        FRONTEND_PATH_PREFIX: ${{ env.FRONTEND_DEPLOY_PATH }}

    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: _site/

  deploy:
    needs: build
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.head_ref != 'refs/heads/main') || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    environment: build_frontend

    steps:
    - name: Set main branch deploy path prefix
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: echo "FRONTEND_DEPLOY_PATH=" >> $GITHUB_ENV
    
    - name: Set non-main branch deploy path prefix
      if: ${{ github.event_name == 'pull_request' && github.head_ref != 'refs/heads/main' }}
      run: echo "FRONTEND_DEPLOY_PATH=staging/${{ github.head_ref }}" >> $GITHUB_ENV

    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: _site/

    - uses: azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    # - name: Delete existing blobs
    #   uses: azure/powershell@v1
    #   with:
    #     azPSVersion: latest
    #     inlineScript: |
    #       Set-AzCurrentStorageAccount -ResourceGroupName ${{ secrets.RESOURCE_GROUP_NAME }} -Name ${{ secrets.STORAGE_ACCOUNT_NAME }}
    #       Get-AzStorageBlob -Container '$web' -Prefix "${{ env.FRONTEND_DEPLOY_PATH }}" | Remove-AzStorageBlob
    
    - name: Upload to blob storage
      uses: azure/powershell@v1
      with:
        azPSVersion: latest
        inlineScript: |
          $staticAssetCacheControl = "public, max-age=31536000, immutable"
          $revalidateAssetCacheControl = "no-cache"
          $properties = @{
            ".css" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "text/css"
            }
            ".js" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "application/javascript"
            }
            ".woff2" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "font/woff2"
            }
            ".jpg" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "image/jpeg"
            }
            ".png" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "image/png"
            }
            ".svg" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "image/svg+xml"
            }
            ".html" = @{
              CacheControl = $revalidateAssetCacheControl
              ContentType = "text/html"
            }
          }
          cd _site
          Set-AzCurrentStorageAccount -ResourceGroupName ${{ secrets.RESOURCE_GROUP_NAME }} -Name ${{ secrets.STORAGE_ACCOUNT_NAME }}
          Get-ChildItem -File -Recurse |
            Foreach-Object -Parallel {
              $properties_dict = $using:properties
              $fileProperties = $properties_dict[$_.extension]
              $relativePath = $_ | Resolve-Path -Relative
              if($fileProperties) {
                Set-AzStorageBlobContent -File $_.fullName -Blob $relativePath -Container '$web' -properties $fileProperties -Force
              } else {
                Set-AzStorageBlobContent -File $_.fullName -Blob $relativePath -Container '$web' -Force
              }
            } -ThrottleLimit 50

